# -*- coding: utf-8 -*-
"""Assignment.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1HVML_67tFR7tWR721R7ho1uZf4Bui36-
"""

!pip install python-docx
!pip install pdfplumber
!pip install google-generativeai

import google.generativeai as genai
import os
from docx import Document
import pdfplumber

# === CONFIGURATION ===
GOOGLE_API_KEY = "AIzaSyAgqY6LA5o-jUv3WaUPO_sniSFyOA4m7a8"  # Replace with your actual API key
genai.configure(api_key=GOOGLE_API_KEY)

# === FUNCTION TO EXTRACT TEXT FROM FILE ===
def extract_text(file_path):
    if file_path.endswith(".pdf"):
        with pdfplumber.open(file_path) as pdf:
            return "\n".join(page.extract_text() for page in pdf.pages if page.extract_text())
    elif file_path.endswith(".docx"):
        doc = Document(file_path)
        return "\n".join([p.text for p in doc.paragraphs])
    else:
        raise ValueError("Unsupported file type. Please upload a .pdf or .docx file.")

# === PROMPT ENGINEERING ===
def generate_fit_score(resume_text, job_description):
    prompt = f"""
You are an AI recruiter. Given the job description and candidate resume, evaluate the candidateâ€™s suitability.

Job Description:
{job_description}

Resume:
{resume_text}

Output (JSON format):
{{
    "Skills Match": "...",
    "Experience Match": "...",
    "Qualification Match": "...",
    "Fit Score": "XX/100",
    "Summary": "..."
}}
"""
    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    return response.text

# === DRIVER FUNCTION ===
if __name__ == "__main__":
    print("Enter the job description for the Software Engineer role (press Enter twice when done):")
    job_description_lines = []
    while True:
        line = input()
        if line.strip() == "":
            break
        job_description_lines.append(line)
    jd = "\n".join(job_description_lines)

    file_path = input("Enter the resume file path (e.g., sample_resume.pdf or sample_resume.docx): ")
    try:
        resume = extract_text(file_path)
        result = generate_fit_score(resume, jd)
        print("\n=== Resume Screening Result ===")
        print(result)
    except Exception as e:
        print(f"Error: {e}")

import google.generativeai as genai
import pandas as pd

# === CONFIGURATION ===
GOOGLE_API_KEY = "AIzaSyAgqY6LA5o-jUv3WaUPO_sniSFyOA4m7a8"  # Replace with your Gemini API key
genai.configure(api_key=GOOGLE_API_KEY)

# === FUNCTION TO ANALYZE FEEDBACK ===
def analyze_feedback(feedback_text):
    prompt = f"""
Analyze the feedback and classify the sentiment and attrition risk level. Suggest engagement strategies if needed.

Feedback:
"{feedback_text}"

Output (JSON format):
{{
    "Sentiment": "Positive/Neutral/Negative",
    "Risk Level": "Low/Medium/High",
    "Key Concerns": "...",
    "Suggested Strategy": "..."
}}
"""
    model = genai.GenerativeModel("gemini-2.0-flash")
    response = model.generate_content(prompt)
    return response.text

# === PROCESSING CSV FEEDBACK DATA ===
def process_csv(file_path):
    df = pd.read_csv(file_path)
    results = []
    for feedback in df["feedback"]:  # Ensure the CSV has a 'feedback' column
        try:
            result = analyze_feedback(feedback)
            results.append(result)
        except Exception as e:
            results.append(f"Error: {e}")
    df["analysis"] = results
    df.to_csv("feedback_with_analysis.csv", index=False)
    print("Analysis saved to 'feedback_with_analysis.csv'.")

# === MAIN EXECUTION ===
if __name__ == "__main__":
    process_csv("employee_feedback.csv")